name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main] # Change this to your release branch if different

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Run version bump only on push to main (release)
      # - name: Bump version and push tag
      #   if: github.event_name == 'push'
      #   uses: phips28/gh-action-bump-version@v11.0.7
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        uses: ./.github/actions/common-ci/setup
        with:
          npm_token_readonly: ${{ secrets.NPM_TOKEN_READONLY_1FE }}
        env:
          NPM_CONFIG_USERCONFIG: ${{ github.workspace }}/.npmrc

      - name: Build
        uses: ./.github/actions/common-ci/build

      # Create zip file for Azure deployment (only for release)
      - name: Zip artifact for deployment
        if: github.event_name == 'push'
        shell: bash
        run: |
          set -e  # Exit immediately if any command fails

          echo "Creating deployment zip with everything..."
          zip -r release.zip . -x "*.git*" "node_modules/.cache/*" ".github/*"

          # Verify the zip was created
          if [ ! -f "release.zip" ]; then
            echo "ERROR: release.zip was not created"
            exit 1
          fi

          echo "âœ… Deployment package created successfully"
          ls -lh release.zip

      # Upload build artifacts for test job - for both PR and release
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist

      # Upload release zip for deployment job - only for release
      - name: Upload artifact for deployment
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 30

  test:
    name: "Test"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"

      - name: Setup environment
        uses: ./.github/actions/common-ci/setup
        with:
          npm_token_readonly: ${{ secrets.NPM_TOKEN_READONLY_1FE }}
        env:
          NPM_CONFIG_USERCONFIG: ${{ github.workspace }}/.npmrc

      # Download build artifacts from build job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run tests
        uses: ./.github/actions/common-ci/test

  # This job only runs on push events to main branch (release)
  deploy:
    name: Deploy
    if: github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write # Required for requesting the JWT
      contents: read # Required for actions/checkout
    steps:
      # Azure deployment
      - name: Download artifact for deployment
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Inspect and unzip artifact for deployment
        run: |
          echo "=== ZIP FILE INFO ==="
          ls -lh release.zip
          echo ""
          echo "=== ZIP CONTENTS ==="
          unzip -l release.zip | head -20
          echo ""
          echo "=== EXTRACTING ZIP ==="
          unzip release.zip
          echo ""
          echo "=== EXTRACTED FOLDER STRUCTURE ==="
          find . -maxdepth 3 -type d | sort
          echo ""
          echo "=== KEY FILES CHECK ==="
          ls -la package.json dist/ 2>/dev/null || echo "Some expected files/folders may be missing"

      - name: Upload to Akamai
        shell: bash
        env:
          AKAMAI_NS_SSH_PRIVATE_KEY: ${{ secrets.AKAMAI_NS_SSH_PRIVATE_KEY }}
          AKAMAI_ENV_PATH: "integration"
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          set -e

          # ===== INSTALL DEPENDENCIES =====
          echo "Installing rsync..."
          sudo apt-get update -q
          sudo apt-get install -y -q rsync
          rsync --version

          # ===== SETUP SSH AUTHENTICATION =====
          echo "Setting up SSH key for Akamai NetStorage..."
          SSH_KEY_PATH="$HOME/key.pem"
          printf "%s\n" "$AKAMAI_NS_SSH_PRIVATE_KEY" > "$SSH_KEY_PATH"
          chmod 600 "$SSH_KEY_PATH"  # Secure the SSH key file

          # ===== DEFINE PATHS AND DIRECTORIES =====
          local_source_dir="${{ github.workspace }}/dist/public"
          staging_dir="staging_for_rsync"
          relative_path_to_create="${AKAMAI_ENV_PATH}/shell/${{ github.run_id }}"
          full_staging_path="$staging_dir/$relative_path_to_create"

          echo "Source directory: $local_source_dir"
          echo "Target path: $relative_path_to_create"

          # ===== PREPARE STAGING DIRECTORY =====
          echo "Creating staging directory structure..."
          mkdir -p "$full_staging_path"
          cp -a "$local_source_dir/." "$full_staging_path/"

          # ===== UPLOAD TO AKAMAI NETSTORAGE =====
          echo "Uploading files to Akamai NetStorage..."
          REMOTE_HOST="sshacs@1fe.rsync.upload.akamai.com"
          SSH_OPTS="-o StrictHostKeyChecking=no -oBatchMode=yes -i $SSH_KEY_PATH"

          cd "$staging_dir"
          # rsync flags: -a (archive), -v (verbose), -R (relative paths), -O (omit dir times)
          rsync -avvRO -e "ssh $SSH_OPTS" "${AKAMAI_ENV_PATH}/" "$REMOTE_HOST:"

          # ===== CLEANUP =====
          echo "Cleaning up temporary files..."
          cd ../ # Go back to original directory
          rm -rf "$staging_dir"
          shred -u "$SSH_KEY_PATH" || rm -f "$SSH_KEY_PATH"

          echo "Upload to Akamai NetStorage completed successfully!"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: Set BUILD_NUMBER environment variable in Azure App Settings so that it can be used in the app
        run: |
          az webapp config appsettings set \
            --name '1fe-demo' \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --settings BUILD_NUMBER=${{ github.run_id }}

          # Verify the setting was applied
          echo "Verifying BUILD_NUMBER was set..."
          az webapp config appsettings list \
            --name '1fe-demo' \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query "[?name=='BUILD_NUMBER']"

      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "1fe-demo"
          slot-name: "Production"
          package: ./
          startup-command: "yarn run start"
